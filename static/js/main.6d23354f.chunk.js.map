{"version":3,"sources":["fonts/Mont-Bold.ttf","fonts/Mont-SemiBold.ttf","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","createMuiTheme","breakpoints","values","xs","sm","md","lg","xl","useStyles","makeStyles","root","height","display","flexDirection","appbar","background","appbarWrapper","width","margin","appbarTitle","flexGrow","icon","color","fontSize","colorText","container","title","fontFamily","fontStyle","textAlign","maxHeight","maxWidth","down","marginBottom","subTitle","marginTop","goDown","content","overflow","marginLeft","marginRight","buttonText","textTransform","button","backgroundColor","borderRadius","Header","classes","Grid","justify","alignItems","className","item","Button","text","minHeight","backgroundImage","process","backgroundRepeat","backgroundSize","backgroundPosition","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d23354f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Mont-Bold.efd54e73.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Mont-SemiBold.5cf16df9.ttf\";","import React from 'react';\nimport { makeStyles, createMuiTheme } from '@material-ui/core/styles';\nimport { Button, Grid } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 415,\n      md: 646,\n      lg: 900,\n      xl: 1366,\n    },\n  },\n})\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    height: '100vh',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  appbar: {\n    background: 'none',\n  },\n  appbarWrapper: {\n    width: '80%',\n    margin: '0 auto',\n  },\n  appbarTitle: {\n    flexGrow: '1',\n  },\n  icon: {\n    color: '#fff',\n    fontSize: '2rem',\n  },\n  colorText: {\n    color: '#5AFF3D',\n  },\n  container: {\n    height: 249,\n    width: 657\n  },\n  title: {\n    color: '#fff',\n    fontSize: 53,\n    fontFamily: 'Mont',\n    fontStyle: 'bold',\n    textAlign: 'left',\n    maxHeight: 249,\n    maxWidth: 980,\n    [theme.breakpoints.down('md')]: {\n      fontSize: 41,\n      marginBottom: 25\n    },\n    [theme.breakpoints.down('xs')]: {\n      fontSize: 35\n    }\n  },\n  subTitle: {\n    color: '#fff',\n    fontSize: 35,\n    fontFamily: 'Mont',\n    fontStyle: 'semibold',\n    textAlign: 'left',\n    [theme.breakpoints.down('md')]: {\n      fontSize: 28,\n      marginTop: 25\n    },\n    [theme.breakpoints.down('xs')]: {\n      fontSize: 26\n    }\n  },\n  goDown: {\n    color: '#5AFF3D',\n    fontSize: '4rem',\n  },\n  content: {\n    overflow: 'auto',\n    marginTop: '10%',\n    [theme.breakpoints.down('md')]: {\n      marginTop: '20%',\n      marginLeft: '5%',\n      marginRight: '5%'\n    },\n    [theme.breakpoints.down('xs')]: {\n      marginTop: '35%',\n      marginLeft: '10%',\n      marginRight: '15%'\n    },\n  },\n  buttonText: {\n    textTransform: 'none',\n    fontFamily: 'Mont',\n    fontStyle: 'bold',\n    fontSize: 18,\n    color: '#FFFFFF',\n    '&:hover': {\n      color: '#C38B54 !important'\n    }\n  },\n  button: {\n    height: 57,\n    width: 207.06,\n    marginLeft: '45%',\n    marginTop: 25,\n    backgroundColor: '#C38B54',\n    borderRadius: 10,\n    '&:hover': {\n      backgroundColor: '#FFFFFF !important'\n    },\n    [theme.breakpoints.down('md')]: {\n      marginLeft: '30%',\n      marginTop: 35,\n    },\n    [theme.breakpoints.down('xs')]: {\n      marginLeft: '20%',\n      marginTop: 50,\n    },\n  }\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n  \n  return (\n      <Grid       \n        container\n        justify='center'\n        alignItems='center'\n        className={classes.root}\n      >\n        <Grid item xs={12} sm={10} className={classes.content}>\n          <Grid item xs={12} sm={10}>\n            <h1 className={classes.title}>\n            Lorem ipsum dolor sit amet, consectetuer elit, sed diam nonummy nibh.\n            </h1>\n          </Grid>\n          <Grid item xs={12} sm={9}>\n            <span className={classes.subTitle}>\n            Lorem ipsum dolor sit amet elit diam nonummy nibh.\n            </span>\n          </Grid>\n          <Button \n              classes={{\n                root: classes.button,\n                text: classes.buttonText\n              }}\n            >\n                  Descubrir m√°s\n        </Button>\n        </Grid>\n      </Grid>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CssBaseline } from '@material-ui/core';\nimport Header from './components/Header';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minHeight: '100vh',\n    backgroundImage: `url(${process.env.PUBLIC_URL + '/assets/bg.jpg'})`,\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'cover',\n    backgroundPosition: 'right'\n  },\n}));\nexport default function App() {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Header />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/Mont-Bold.ttf'\nimport './fonts/Mont-SemiBold.ttf'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}